/*
Name         : Jagadeesh
Date         : 19 October 2022
Description  : printing negative fabonicci series
Sample input : any non zero negative number eg: 5
Sample output: 0 1 -1 2 -3 5 
*/            

#include<stdio.h>                                                               // header files for standard input and output
int main()                                                                      // starting of the program    
{                                                                               // starting point of the block
    int x=0,y=1,next=0,n;                                                       // declaring variables

    printf("enter a negative number:");                                         // user to enter the values
    scanf("%d",&n);                                                             // to check input from the user

    if ( n < 0 )       			                                                // checking whether the number is negative or not
    {
       	while(next>=n)     
       	{
    	    printf("%d ", next);
    	    x=y;         		                                                // moving value of y to x
    	    y=next;       		                                                // moving value of next to y
    	    next=x-y;     		                                                // calculating next
    	    if ( next>(-n) && next>n ) 	                                        // checking the next value is greter then entered number   
	      	break;    		                                                    // irrespective of sign
      	}
	printf("\n");     		                                                    // next line
    }

    else if ( n > 0 )    	                                                    // given number is greter then zero get invalid input
    {
	printf("Invalid input\n");
    }

    else           		             	                                        //if the number apart from that greter then and less then zero
    {
	printf("0\n");
    }      			 
    return 0;
}                                                                               // ending point of the block
