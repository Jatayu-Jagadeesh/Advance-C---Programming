/*
Doc
Name:  Jagadeesh
Date: 21/10/2022
Description: WAP to print all primes using Sieve of Eratosthenes method
Sample input:
Sample output:
Doc
*/

#include<stdio.h>                                                               // header file for standard input and output
int main()
{                                                                               // starting point of the block  
    int n,i,j;						                                            //variable declaration
    printf("Enter the value of 'n': ");
    scanf("%d", &n);					                                        //reading input from user
    if (n>1)						                                            //checking if condition whether input value is negative or not 
    {
	    int arr[n];					                                            //declaration array
	    printf("The primes less than or equal to %d are: ",n);
	    for (i=2; i<=n; i++)				                                    //using for loop taking array elements
	    arr[i]=i;
	    for ( i=2; i*i<=n; i++)				                                    //i*i is the efficient way of finding all primes
	    {
	        for ( j=2; i*j<=n; j++)                                             // j loop condition
	        {
		        arr [i*j]=0;                                                    // i*j = 0
	        }
	    }
	        for ( i=2; i<=n; i++)				                                //printing prime elements
	        {
	            if (arr[i] !=0)				                                    //checking condition to neglect 0
	    	    printf("%d,", arr[i]);			                                //printing prime numbers
	        }
    }
    else
    {
	    printf("Please enter a positive number which is >1");	                //error message
    }
    printf("\n ");                                                              // printing for newline
    return 0;                                                                   // sucessulfull excution of the program
}                                                                               // ending point of the block
