/*
Name         : Jagadeesh
Date         : 24 December 2022
Description  : WAP to implement fragments using Array of Pointers
Sample Input : Enter no.of rows : 3
               Enter no of columns in row[0] : 4
               Enter no of columns in row[1] : 3
               Enter no of columns in row[2] : 5
               Enter 4 values for row[0] : 1 2 3 4
               Enter 3 values for row[1] : 2 5 9
               Enter 5 values for row[2] : 1 3 2 4 1
Sample Output: Before sorting output is:

               1.000000 2.000000 3.000000 4.000000 2.500000

               2.000000 5.000000 9.000000 5.333333

               1.000000 3.000000 2.000000 4.000000 1.000000 2.200000

               After sorting output is:

               1.000000 3.000000 2.000000 4.000000 1.000000 2.200000

               1.000000 2.000000 3.000000 4.000000 2.500000

               2.000000 5.000000 9.000000 5.333333
*/
#include<stdio.h>
#include<stdlib.h>
int fragments(int, float *[], int[]);                                           // function proto type
int swap(int, float *[], int []);                                               // function prototype
int main()
{
    int row,i,j;
    printf("Enter no.of rows:");                                                // read no.of rows from the user
    scanf("%d",&row);      
    float *array[row];                                                          // declare array of pointer                                               
    int array_col[row];                                                         // declare array for columns
    for(i = 0; i < row; i++)
    {
	    printf("Enter no of columns in row[%d]:",i);
	    scanf("%d",&array_col[i]);                                              // read no.of elements for each column
	    array[i] = malloc ((array_col[i]+1) * sizeof(float));                   // allocate dynamic memory
    }
    for(i = 0; i < row; i++)
    {
	    printf("Enter %d values for row[%d]:",array_col[i] , i);
	    for(j = 0; j < array_col[i]; j++)
	    {
		    scanf("%f",&array[i][j]);                                           //read values of 2d array
	    }
    }
	/* < ------ function call ------ > */
	fragments(row, array, array_col);
	return 0;
}
/* < ------ function defination ------ > */
int fragments(int row, float *array[row], int *array_col)
{
	int i,j;
	float avg,sum;
	for(i = 0; i < row; i++)                                                    // loop for rows
	{
		sum = 0;
		for(j = 0; j < array_col[i]; j++)                                       // loop for column
			sum = sum + array[i][j];
		avg = sum/array_col[i];                                                 // find average of each 1d array
		array[i][j] = avg;                                                      // storing avg to last element of 1d array
	}
	printf("Before sorting output is:\n");
	for(i = 0; i < row; i++)
	{
		for(j = 0; j < (array_col[i] + 1); j++)
			printf("%f ",array[i][j]);                                          // output before sorting array
		printf("\n");
	}

	for(i = row - 1; i >=0; i--)
	{
		for(j = 0; j < i; j++)
		{
			if (array[j][array_col[j]] > array[j+1][array_col[j+1]])
				swap(j, array, array_col);                                      // function call for swapping 1d arrays
		}
	}
	printf("After sorting output is:\n");
	for(i = 0; i < row; i++)
	{
		for(j = 0; j < (array_col[i] +1); j++)
			printf("%f ",array[i][j]);                                          // output after sorting 1d arrays
		printf("\n");
	}
}
int swap(int row, float *array[row], int array_col[row])                        // swapping function defination
{
	int temp1;
	float *temp;
	/* swapping 1d arrays */
	temp = array[row];
	array[row] = array[row+1];
	array[row+1] = temp;
    /* swapping values of col array */
	temp1 = array_col[row];
	array_col[row] = array_col[row+1];
	array_col[row+1] = temp1;
}
